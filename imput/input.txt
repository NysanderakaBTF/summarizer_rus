1.1. Задачи системы контроля и управлениями версиями
Система управления версиями (от англ. Version Control System, VCS или
Revision Control System) — программное обеспечение для облегчения работы с
изменяющейся информацией. Система управления версиями позволяет хранить несколько
версий одного и того же документа, при необходимости возвращаться к более ранним
версиям, определять, кто и когда сделал то или иное изменение, и многое другое.
Такие системы наиболее широко используются при разработке программного
обеспечения для хранения исходных кодов разрабатываемой программы. Однако они
могут с успехом применяться и в других областях, в которых ведѐтся работа с большим
количеством непрерывно изменяющихся электронных документов. В частности, системы
управления версиями применяются в САПР, обычно в составе систем управления
данными об изделии (PDM). Управление версиями используется в инструментах
конфигурационного управления (Software Configuration Management Tools).
Общие сведения
Ситуация, в которой электронный документ за время своего существования
претерпевает ряд изменений, достаточно типична. При этом часто бывает важно иметь не
только последнюю версию, но и несколько предыдущих. В простейшем случае можно
просто хранить несколько вариантов документа, нумеруя их соответствующим образом.
Такой способ неэффективен (приходится хранить несколько практически идентичных
копий), требует повышенного внимания и дисциплины и часто ведѐт к ошибкам, поэтому
были разработаны средства для автоматизации этой работы.
Традиционные системы управления версиями используют централизованную
модель, когда имеется единое хранилище документов, управляемое специальным
сервером, который и выполняет бо льшую часть функций по управлению версиями.
Пользователь, работающий с документами, должен сначала получить нужную ему версию
документа из хранилища; обычно создаѐтся локальная копия документа, так называемая
«рабочая копия». Может быть получена последняя версия или любая из предыдущих,
которая может быть выбрана по номеру версии или дате создания, иногда и по другим
признакам. После того, как в документ внесены нужные изменения, новая версия
помещается в хранилище. В отличие от простого сохранения файла, предыдущая версия
не стирается, а тоже остаѐтся в хранилище и может быть оттуда получена в любое время.
Сервер может использовать т. н. дельта-компрессию — такой способ хранения
документов, при котором сохраняются только изменения между последовательными
версиями, что позволяет уменьшить объѐм хранимых данных. Поскольку обычно
наиболее востребованной является последняя версия файла, система может при
сохранении новой версии сохранять еѐ целиком, заменяя в хранилище последнюю ранее
сохранѐнную версию на разницу между этой и последней версией. Некоторые системы
(например, ClearCase) поддерживают сохранение версий обоих видов: большинство
версий сохраняется в виде дельт, но периодически (по специальной команде
3
администратора) выполняется сохранение версий всех файлов в полном виде; такой
подход обеспечивает максимально полное восстановление истории в случае повреждения
репозитория.
Иногда создание новой версии выполняется незаметно для пользователя
(прозрачно), либо прикладной программой, имеющей встроенную поддержку такой
функции, либо за счѐт использования специальной файловой системы. В этом случае
пользователь просто работает с файлом, как обычно, и при сохранении файла
автоматически создаѐтся новая версия.
Часто бывает, что над одним проектом одновременно работают несколько человек.
Если два человека изменяют один и тот же файл, то один из них может случайно отменить
изменения, сделанные другим. Системы управления версиями отслеживают такие
конфликты и предлагают средства их решения. Большинство систем может автоматически
объединить (слить) изменения, сделанные разными разработчиками. Однако такое
автоматическое объединение изменений, обычно, возможно только для текстовых файлов
и при условии, что изменялись разные (непересекающиеся) части этого файла. Такое
ограничение связано с тем, что большинство систем управления версиями ориентированы
на поддержку процесса разработки программного обеспечения, а исходные коды
программ хранятся в текстовых файлах. Если автоматическое объединение выполнить не
удалось, система может предложить решить проблему вручную.
Часто выполнить слияние невозможно ни в автоматическом, ни в ручном режиме,
например, если формат файла неизвестен или слишком сложен. Некоторые системы
управления версиями дают возможность заблокировать файл в хранилище. Блокировка не
позволяет другим пользователям получить рабочую копию или препятствует изменению
рабочей копии файла (например, средствами файловой системы) и обеспечивает, таким
образом, исключительный доступ только тому пользователю, который работает с
документом.
Многие системы управления версиями предоставляют ряд других возможностей:
 Позволяют создавать разные варианты одного документа, т. н. ветки, с
общей историей изменений до точки ветвления и с разными — после неѐ.
 Дают возможность узнать, кто и когда добавил или изменил конкретный
набор строк в файле.
 Ведут журнал изменений, в который пользователи могут записывать
пояснения о том, что и почему они изменили в данной версии.
 Контролируют права доступа пользователей, разрешая или запрещая чтение
или изменение данных, в зависимости от того, кто запрашивает это
действие.
Задачами системы контроля версий являются следующие:
 фиксация изменений для отслеживаемых, добавляемых или удаляемых
файлов исходного кода в рабочем дереве проекта;
 хранение истории зафиксированных изменений исходного кода;
4
 сравнение и поиск ранее зафиксированных изменений исходного кода;
 объединение наработок и экспериментальных изменений, ведущихся
различными разработчиками над одним исходным кодом.
Цепочка зафиксированных изменений исходного кода называется историей
программного проекта. История программного проекта хранится в репозитории
программного проекта.
1.2. Локальные системы контроля версий
Один из примеров локальной СУВ предельно прост: многие предпочитают
контролировать версии, просто копируя файлы в другой каталог (как правило, добавляя
текущую дату к названию каталога). Такой подход очень распространѐн, потому что
прост, но он и чаще даѐт сбои. Очень легко забыть, что ты не в том каталоге, и случайно
изменить не тот файл, либо скопировать файлы не туда, куда хотел, и затереть нужные
файлы. Чтобы решить эту проблему, программисты уже давно разработали локальные
СКВ с простой базой данных, в которой хранятся все изменения нужных файлов
Одной из наиболее популярных СКВ такого типа является RCS (Revision Control
System, Система контроля ревизий), которая до сих пор устанавливается на многие
компьютеры. Даже в современной операционной системе Mac OS X утилита rcs
устанавливается вместе с Developer Tools. RCS была разработана в начале 1980-х годов
Вальтером Тичи (Walter F. Tichy). Система позволяет хранить версии только одного
файла, таким образом управлять несколькими файлами приходится вручную. Для каждого
файла находящегося под контролем системы информация о версиях хранится в
специальном файле с именем оригинального файла к которому в конце добавлены
символы ',v'. Например для файла file.txt версии будут храниться в файле file.txt,v. Эта
утилита основана на работе с наборами патчей между парами версий (патч — файл,
описывающий различие между файлами). Это позволяет пересоздать любой файл на
любой момент времени, последовательно накладывая патчи. Для хранения версий система
использует утилиту diff. Хотя RCS соответствует минимальным требованиям к системе
контроля версий она имеет следующие основные недостатки, которые также послужили
стимулом для создания следующей рассматриваемой системы:
 Работа только с одним файлом, каждый файл должен контролироваться
отдельно;
 Неудобный механизм одновременной работы нескольких пользователей с
системой, хранилище просто блокируется пока заблокировавший его
пользователь не разблокирует его;
 От бекапов вас никто не освобождает, вы рискуете потерять всѐ.
5
Рисунок 1.1. Схема локальной СКВ.
1.3. Централизованные системы контроля версий
Следующей основной проблемой оказалась необходимость сотрудничать с
разработчиками за другими компьютерами. Чтобы решить еѐ, были созданы
централизованные системы контроля версий (ЦСКВ). В таких системах, например, CVS,
Subversion и Perforce, есть центральный сервер, на котором хранятся все файлы под
версионным контролем, и ряд клиентов, которые получают копии файлов из него. Много
лет это было стандартом для систем контроля версий.
Такой подход имеет множество преимуществ, особенно над локальными СКВ. К
примеру, все знают, кто и чем занимается в проекте. У администраторов есть чѐткий
контроль над тем, кто и что может делать, и, конечно, администрировать ЦСКВ намного
легче, чем локальные базы на каждом клиенте. Однако при таком подходе есть и
несколько серьѐзных недостатков. Наиболее очевидный — централизованный сервер
является уязвимым местом всей системы. Если сервер выключается на час, то в течение
часа разработчики не могут взаимодействовать, и никто не может сохранить новой версии
своей работы. Если же повреждается диск с центральной базой данных и нет резервной
копии, вы теряете абсолютно всѐ — всю историю проекта, разве что за исключением
нескольких рабочих версий, сохранившихся на рабочих машинах пользователей.
6
Рисунок 1.2. Схема централизованного контроля версий.
1.4. Система совместных версий CVS
CVS (Concurrent Versions System, Система совместных версий) пока остается самой
широко используемой системой, но быстро теряет свою популярность из-за недостатков,
которые будут рассмотрены ниже. Дик Грун (Dick Grune) разработал CVS в середине
1980-х. Для хранения индивидуальных файлов CVS (также как и RCS) использует файлы
в RCS формате, но позволяет управлять группами файлов расположенных в директориях.
Также CVS использует клиент-сервер архитектуру, в которой вся информация о версиях
хранится на сервере. Использование клиент-сервер архитектуры позволяет использовать
CVS даже географически распределенным командами пользователей где каждый
пользователь имеет свой рабочий директорий с копией проекта. Как следует из названия
пользователи могут использовать систему совместно.
Возможные конфликты при изменении одного и того же файла разрешаются тем,
что система позволяет вносить изменения только в самую последнюю версию файла.
Таким образом всегда рекомендуется перед заливкой своих изменений обновлять свою
рабочую копию файлов на случай возможных конфликтующих изменений. При
обновлении система вносит изменения в рабочую копию автоматически и только в случае
конфликтующих изменений в одном из мест файла требуется ручное исправление места
конфликта.
CVS также позволяет вести несколько линий разработки проекта с помощью ветвей
(branches) разработки. Таким образом, как уже упоминалось выше, можно исправлять
ошибки в первой версии проекта и параллельно разрабатывать новую функциональность.
CVS использовалась большим количеством проектов, но конечно не была лишена
недостатков, которые позднее привели к появлению следующей рассматриваемой
системы. Рассмотрим основные недостатки:
 Так как версии хранятся в файлах RCS нет возможности сохранять версии
директорий. Стандартный способ обойти это препятствие - это сохранить
какой-либо файл (например, README.txt) в директории;
7
 Перемещение, или переименование файлов не подвержено контролю
версий. Стандартный способ сделать это: сначала скопировать файл,
удалить старый с помощью команды cvs remove и затем добавить с его
новым именем с помощью команды cvs add;
Система управления параллельными версиями (Concurrent Versions System) –
логическое развитие системы управления пересмотрами версий (RCS), использующая ее
стандарты и алгоритмы по управлению версиями, но значительно более функциональная,
и позволяющая работать не только с отдельными файлами, но и с целыми проектами.
CVS основана на технологии клиент-сервер, взаимодействующих по сети. Клиент и
сервер также могут располагаться на одной машине, если над проектом работает только
один человек, или требуется вести локальный контроль версий.
Работа CVS организована следующим образом. Последняя версия и все сделанные
изменения хранятся в репозитории сервера. Клиенты, подключаясь к серверу, проверяют
отличия локальной версии от последней версии, сохраненной в репозитории, и, если есть
отличия, загружают их в свой локальный проект. При необходимости решают конфликты
и вносят требуемые изменения в разрабатываемый продукт. После этого все изменения
загружаются в репозиторий сервера. CVS, при необходимости, позволяет откатываться на
нужную версию разрабатываемого проекта и вести управление несколькими проектами
одновременно.
Приведем основные достоинства и недостатки системы управления параллельными
версиями.
Достоинства:
 Несколько клиентов могут одновременно работать над одним и тем же
проектом.
 Позволяет управлять не одним файлом, а целыми проектами.
 Обладает огромным количеством удобных графических интерфейсов,
способных удовлетворить практически любой, даже самый требовательный
вкус.
 Широко распространена и поставляется по умолчанию с большинством
операционных систем Linux.
 При загрузке тестовых файлов из репозитория передаются только
изменения, а не весь файл целиком.
Недостатки:
 При перемещении, переименовании файла или директории теряются все,
привязанные к этому файлу или директории, изменения.
 Сложности при ведении нескольких параллельных веток одного и того же
проекта.
 Ограниченная поддержка шрифтов.
8
 Для каждого изменения бинарного файла сохраняется вся версия файла, а не
только внесенное изменение.
 С клиента на сервер измененный файл всегда передается полностью.
 Ресурсоемкие операции, так как требуют частого обращения к репозиторию,
и сохраняемые копии имеют некоторую избыточность.
Несмотря на то, что CVS устарела и обладает серьезными недостатками, она все
еще является одной из самых популярных систем контроля версий и отлично подходит
для управления небольшими проектами, не требующих создания нескольких
параллельных версий, которые надо периодически объединять. CVS можно
порекомендовать, как промежуточный шаг в освоении работы систем контроля версий,
ведущий к более мощным и современным видам таких программ.
1.5. Subversion (SVN)
Subversion – эта централизованная система управления версиями, созданная в 2000
году и основанная на технологии клиент-сервер. Она обладает всеми достоинствами CVS
и решает основные ее проблемы (переименование и перемещение файлов и каталогов,
работа с двоичными файлами и т.д.). Часто ее называют по имени клиентской части –
SVN. SVN также, как и CVS использует клиент-сервер архитектуру.
Принцип работы с Subversion очень походит на работу с CVS. Клиенты копируют
изменения из репозитория и объединяют их с локальным проектом пользователя. Если
возникают конфликты локальных изменений и изменений, сохраненных в репозитории, то
такие ситуации разрешаются вручную. Затем в локальный проект вносятся изменения, и
полученный результат сохраняется в репозитории.
При работе с файлами, не позволяющими объединять изменения, может
использоваться следующий принцип:
1. Файл скачивается из репозитория и блокируется (запрещается его
скачивание из репозитория).
2. Вносятся необходимые изменения.
3. Загружается файл в репозиторий и снимается блокировка (разрешается его
скачивание из репозитория другим клиентам).
Во многом, из-за простаты и схожести в управлении с CVS, но в основном, из-за
своей широкой функциональности, Subversion с успехом конкурирует с CVS и даже
успешно ее вытесняет.
Однако, и у Subversion есть недостатки. Давайте рассмотрим ее слабые и сильные
стороны для сравнения с другими системами управления версиями.
Достоинства:
 Система команд, схожая с CVS.
 Поддерживается большинство возможностей CVS.
 Разнообразные графические интерфейсы и удобная работа из консоли.
9
 Отслеживается история изменения файлов и каталогов даже после их
переименования и перемещения.
 Высокая эффективность работы, как с текстовыми, так и с бинарными
файлами.
 Встроенная поддержка во многие интегрированные средства разработки,
такие как KDevelop, Zend Studio и многие другие.
 Возможность создания зеркальных копий репозитория.
 Два типа репозитория – база данных или набор обычных файлов.
 Возможность доступа к репозиторию через Apache с использованием
протокола WebDAV.
 Наличие удобного механизма создания меток и ветвей проектов.
 Можно с каждым файлом и директорией связать определенный набор
свойств, облегчающий взаимодействие с системой контроля версии.
 Широкое распространение позволяет быстро решить большинство
возникающих проблем, обратившись к данным, накопленным Интернетсообществом.
Недостатки:
 Полная копия репозитория хранится на локальном компьютере в скрытых
файлах, что требует достаточно большого объема памяти.
 Существуют проблемы с переименованием файлов, если переименованный
локально файл одним клиентом был в это же время изменен другим
клиентом и загружен в репозиторий.
 Слабо поддерживаются операции слияния веток проекта.
 Сложности с полным удалением информации о файлах, попавших в
репозиторий, так как в нем всегда остается информация о предыдущих
изменениях файла, и непредусмотрено никаких штатных средств для
полного удаления данных о файле из репозитория.
Subversion – современная система контроля версий, обладающая широким набором
инструментов, позволяющих удовлетворить любые нужды для управления версиями
проекта с помощью централизованной системы контроля. В Интернете множество
ресурсов посвящено особенностям Subversion, что позволяет быстро и качественно решать
все возникающие в ходе работы проблемы.
Простота установки, подготовки к работе и широкие возможности позволяют
ставить subversion на одну из лидирующих позиций в конкурентной гонке систем
контроля версий.
10
1.6. Распределѐнные системы контроля версий
И в этой ситуации в игру вступают распределѐнные системы контроля версий
(РСКВ). В таких системах как Git, Mercurial, Bazaar или Darcs клиенты не просто
выгружают последние версии файлов, а полностью копируют весь репозиторий. Поэтому
в случае, когда "умирает" сервер, через который шла работа, любой клиентский
репозиторий может быть скопирован обратно на сервер, чтобы восстановить базу данных.
Каждый раз, когда клиент забирает свежую версию файлов, он создаѐт себе полную
копию всех данных.
Кроме того, в большей части этих систем можно работать с несколькими
удалѐнными репозиториями, таким образом, можно одновременно работать по-разному с
разными группами людей в рамках одного проекта. Так, в одном проекте можно
одновременно вести несколько типов рабочих процессов, что невозможно в
централизованных системах.
Назначение распределенные систем
Как следует из названия, одна из основных идей распределенных систем — это
отсутствие четко выделенного центрального хранилища версий - репозитория. В случае
распределенных систем набор версий может быть полностью, или частично распределен
между различными хранилищами, в том числе и удаленными. Такая модель отлично
вписывается в работу распределенных команд, например, распределенной по всему миру
команды разработчиков, работающих над одним проектом с открытым исходным кодом.
Разработчик такой команды может скачать себе всю информацию по версиям и после
этого работать только на локальной машине. Как только будет достигнут результат одного
из этапов работы, изменения могут быть залиты в один из центральных репозиториев или,
опубликованы для просмотра на сайте разработчика, или в почтовой рассылке. Другие
участники проекта, в свою очередь, смогут обновить свою копию хранилища версий
новыми изменениями, или попробовать опубликованные изменения на отдельной,
тестовой ветке разработки. К сожалению, без хорошей организации проекта отсутствие
одного центрального хранилища может быть минусом распределенных систем. Если в
случае централизованных систем всегда есть один общий репозиторий откуда можно
получить последнюю версию проекта, то в случае распределенных систем нужно
организационно решить какая из веток проекта будет основной. Почему распределенная
система контроля версий может быть интересна кому-то, кто уже использует
централизованную систему - такую как Subversion? Любая работа подразумевает принятие
решений, и в большинстве случаев необходимо пробовать различные варианты: при
работе с системами контроля версий для рассмотрения различных вариантов и работы над
большими изменениями служат ветки разработки. И хотя это достаточно естественная
концепция, пользоваться ей в Subversion достаточно непросто. Тем более, всѐ усложняется
в случае множественных последовательных объединений с одной ветки на другую — в
этом случае нужно безошибочно указывать начальные и конечные версии каждого
изменения, чтобы избежать конфликтов и ошибок. Для распределенных систем контроля
версий ветки разработки являются одной из основополагающих концепций — в
большинстве случаев каждая копия хранилища версий является веткой разработки. Таким
образом, механизм объединения изменений с одной ветки на другую в случае
11
распределенных систем является одним из основных, что позволяет пользователям
прикладывать меньше усилий при пользовании системой.
Рисунок 1.3. Схема распределѐнной системы контроля версий.
Краткое описание популярных распределенных СУВ
 Git - распределенная система контроля версий, разработанная Линусом
Торвальдсом. Изначально Git предназначалась для использования в
процессе разработки ядра Linux, но позже стала использоваться и во многих
других проектах — таких, как, например, X.org и Ruby on Rails, Drupal. На
данный момент Git является самой быстрой распределенной системой,
использующей самое компактное хранилище ревизий. Но в тоже время для
пользователей, переходящих, например, с Subversion интерфейс Git может
показаться сложным;
 Mercurial - распределенная система, написанная на языке Python с
несколькими расширениями на C. Из использующих Mercurial проектов
можно назвать, такие, как, Mozilla и MoinMoin.
 Bazaar - система разработка которой поддерживается компанией Canonical
— известной своими дистрибутивом Ubuntu и сайтом httpss://launchpad.net/.
Система в основном написана на языке Python и используется такими
проектами, как, например, MySQL.
 Codeville - написанная на Python распределенная система использующая
инновационный алгоритм объединения изменений (merge). Система
используется, например, при разработке оригинального клиента BitTorrent.
 Darcs - распределенная система контроля версий, написанная на Haskell
используемая, например, проектом Buildbot.
 Monotone - система, написанная на C++ и использующая SQLite как
хранилище ревизий.
12
1.7. Система управления версиями Git
С февраля 2002 года для разработки ядра Linux’а большинством программистов
стала использоваться система контроля версий BitKeeper. Довольно долгое время с ней не
возникало проблем, но в 2005 году Лари МакВоем (разработчик BitKeeper’а) отозвал
бесплатную версию программы.
Разрабатывать проект масштаба Linux без мощной и надежной системы контроля
версий – невозможно. Одним из кандидатов и наиболее подходящим проектом оказалась
система контроля версий Monotine, но Торвальдса Линуса не устроила ее скорость работы.
Так как особенности организации Monatone не позволяли значительно увеличить скорость
обработки данных, то 3 апреля 2005 года Линус приступил к разработке собственной
системы контроля версий – Git.
Практически одновременно с Линусом (на три дня позже), к разработке новой
системы контроля версий приступил и Мэтт Макал. Свой проект Мэтт назвал Mercurial,
но об этом позже, а сейчас вернемся к распределенной системе контроля версий Git.
Git – это гибкая, распределенная (без единого сервера) система контроля версий,
дающая массу возможностей не только разработчикам программных продуктов, но и
писателям для изменения, дополнения и отслеживания изменения «рукописей» и
сюжетных линий, и учителям для корректировки и развития курса лекций, и
администраторам для ведения документации, и для многих других направлений,
требующих управления историей изменений.
У каждого разработчика, использующего Git, есть свой локальный репозиторий,
позволяющий локально управлять версиями. Затем, сохраненными в локальный
репозиторий данными, можно обмениваться с другими пользователями.
Часто при работе с Git создают центральный репозиторий, с которым остальные
разработчики синхронизируются. Пример организации системы с центральным
репозиторием – это проект разработки ядра Linux’a.
В этом случае все участники проекта ведут свои локальны разработки и
беспрепятственно скачивают обновления из центрального репозитория. Когда
необходимые работы отдельными участниками проекта выполнены и отлажены, они,
после удостоверения владельцем центрального репозитория в корректности и
актуальности проделанной работы, загружают свои изменения в центральный
репозиторий.
Наличие локальных репозиторием также значительно повышает надежность
хранения данных, так как, если один из репозиториев выйдет из строя, данные могут быть
легко восстановлены из других репозиториев.
Работа над версиями проекта в Git может вестись в нескольких ветках, которые
затем могут с легкостью полностью или частично объединяться, уничтожаться,
откатываться и разрастаться во все новые и новые ветки проекта.
Можно долго обсуждать возможности Git’а, но для краткости и более простого
восприятия приведем основные достоинства и недостатки этой системы управления
версиями
13
Достоинства:
 Надежная система сравнения ревизий и проверки корректности данных,
основанные на алгоритме хеширования SHA1 (Secure Hash Algorithm 1).
 Гибкая система ветвления проектов и слияния веток между собой.
 Наличие локального репозитория, содержащего полную информацию обо
всех изменениях, позволяет вести полноценный локальный контроль версий
и заливать в главный репозиторий только полностью прошедшие проверку
изменения.
 Высокая производительность и скорость работы.
 Удобный и интуитивно понятный набор команд.
 Множество графических оболочек, позволяющих быстро и качественно
вести работы с Git’ом.
 Возможность делать контрольные точки, в которых данные сохраняются без
дельта компрессии, а полностью. Это позволяет уменьшить скорость
восстановления данных, так как за основу берется ближайшая контрольная
точка, и восстановление идет от нее. Если бы контрольные точки
отсутствовали, то восстановление больших проектов могло бы занимать
часы.
 Широкая распространенность, легкая доступность и качественная
документация.
 Гибкость системы позволяет удобно ее настраивать и даже создавать
специализированные контроля системы или пользовательские интерфейсы
на базе git.
 Универсальный сетевой доступ с использованием протоколов http, ftp, rsync,
ssh и др.
Недостатки:
 Возможные (но чрезвычайно низкие) совпадения хеш - кода отличных по
содержанию ревизий.
 Не отслеживается изменение отдельных файлов, а только всего проекта
целиком, что может быть неудобно при работе с большими проектами,
содержащими множество несвязных файлов.
 При начальном (первом) создании репозитория и синхронизации его с
другими разработчиками, потребуется достаточно длительное время для
скачивания данных, особенно, если проект большой, так как требуется
скопировать на локальный компьютер весь репозиторий.
Git – гибкая, удобная и мощная система контроля версий, способная удовлетворить
абсолютное большинство пользователей. Существующие недостатки постепенно
удаляются и не приносят серьезных проблем пользователям. Если вы ведете большой
проект, территориально удаленный, и тем более, если часто приходится разрабатывать
14
программное обеспечение, не имея доступа к другим разработчикам (например, вы не
хотите терять время при перелете из страны в страну или во время поездки на работу),
можно делать любые изменения и сохранять их в локальном репозитории, откатываться,
переключаться между ветками и т.д.). Git – один из лидеров систем контроля версий.
1.8. Система управления версиями Mercurial.
Распределенная система контроля версий Mercurial разрабатывалась Мэттом
Макалом параллельно с системой контроля версий Git, созданной Торвальдсом Линусом.
Первоначально, она была создана для эффективного управления большими
проектами под Linux’ом, а поэтому была ориентирована на быструю и надежную работу с
большими репозиториями. На данный момент mercurial адаптирован для работы под
Windows, Mac OS X и большинство Unix систем.
Большая часть системы контроля версий написана на языке Python, и только
отдельные участки программы, требующие наибольшего быстродействия, написаны на
языке Си.
Идентификация ревизий происходит на основе алгоритма хеширования SHA1
(Secure Hash Algorithm 1), однако, также предусмотрена возможность присвоения
ревизиям индивидуальных номеров.
Так же, как и в git’е, поддерживается возможность создания веток проекта с
последующим их слиянием.
Для взаимодействия между клиентами используются протоколы HTTP, HTTPS или
SSH.
Набор команд - простой и интуитивно понятный, во многом схожий с командами
subversion. Так же имеется ряд графических оболочек и доступ к репозиторию через вебинтерфейс. Немаловажным является и наличие утилит, позволяющих импортировать
репозитории многих других систем контроля версий.
Достоинства:
 Быстрая обработка данных.
 Кросплатформенная поддержка.
 Возможность работы с несколькими ветками проекта.
 Простота в обращение.
Возможность конвертирования репозиториев других систем поддержки версий,
таких как CVS, Subversion, Git, Darcs, GNU Arch, Bazaar и др.
Недостатки:
 Возможные (но чрезвычайно низкие) совпадения хеш - кода отличных по
содержанию ревизий.
 Ориентирован на работу в консоли.
15
Простой и отточенный интерфейс, и набор команд, возможность импортировать
репозитории с других систем контроля версий, - сделают переход на Mercurial и обучение
основным особенностями безболезненным и быстрым. Вряд ли это займет больше
нескольких дней.
Надежность и скорость работы позволяют использовать его для контроля версий
огромных проектов. Все это делает mercurial достойным конкурентом git’а